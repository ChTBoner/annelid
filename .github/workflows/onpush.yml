# Based on https://github.com/actions-rs/meta/blob/master/recipes/quickstart.md
#
# While our "example" application has the platform-specific code,
# for simplicity we are compiling and testing everything on the Ubuntu environment only.
# For multi-OS testing see the `cross.yml` workflow.

on: [push, pull_request]


jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings


  build-ubuntu:
    #needs:
    #  - check
    #  - test
    #  - lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - run: sudo apt-get install -y wget
      - run: sudo apt-get install -y libpangocairo-1.0-0 libpangoxft-1.0-0 libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpango1.0-dev libgl1-mesa-dev libglu1-mesa-dev
      - run: cargo build --release
      - run: cargo install --force cargo-strip
      - run: cargo strip
      - run: cargo install --force cargo-appimage
      - run: wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-$(uname -m).AppImage -O appimagetool
      - run: chmod a+x appimagetool
      - run: PATH=./:$PATH cargo appimage
      - uses: actions/upload-artifact@v3
        with:
          name: annelid-0.1.0-x86_64.AppImage
          path: annelid-0.1.0-x86_64.AppImage
  build-windows:
    #needs:
    #  - check
    #  - test
    #  - lints
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - run: cargo build --release
      - run: cargo install --force cargo-strip
      - run: cargo strip
      - uses: actions/upload-artifact@v3
        with:
          name: annelid-0.1.0-x86_64.win
          path: ./target/release/annelid.exe
  build-macos:
    #needs:
    #  - check
    #  - test
    #  - lints
    runs-on: macos-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - run: cargo build --release
      - run: cargo install --force cargo-strip
      - run: cargo strip
      - uses: actions/upload-artifact@v3
        with:
          name: annelid-0.1.0-x86_64.macos
          path: ./target/release/annelid
  release:
    if: github.ref == 'refs/heads/feature/fltk-exploration'
    needs:
      - check
      - test
      - lints
      - build-ubuntu
      - build-windows
      - build-macos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: actions/download-artifact@v3
        with:
          name: annelid-0.1.0-x86_64.AppImage
          path: annelid-0.1.0-x86_64.AppImage/
      - uses: actions/download-artifact@v3
        with:
          name: annelid-0.1.0-x86_64.macos
          path: annelid-0.1.0-x86_64.macos/
      - uses: actions/download-artifact@v3
        with:
          name: annelid-0.1.0-x86_64.win
          path: annelid-0.1.0-x86_64.win/
      - id: get_commit_id
        run: echo ::set-output name=SHORT_COMMIT_ID::$(git rev-parse --short HEAD)
        shell: bash
      - id: tag_date
        run: echo ::set-output name=TAG_NAME::$(date +'%Y-%m-%d')-${{ steps.get_commit_id.outputs.short_commit_id }}
        shell: bash
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_date.outputs.TAG_NAME }}
          release_name: Release ${{ steps.tag_date.outputs.TAG_NAME }}
          draft: true
          prerelease: true
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./annelid-0.1.0-x86_64.AppImage/annelid-0.1.0-x86_64.AppImage
          asset_name: annelid-0.1.0-x86_64-linux.AppImage
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./annelid-0.1.0-x86_64.win/annelid.exe
          asset_name: annelid-0.1.0-x86_64-windows.exe
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./annelid-0.1.0-x86_64.macos/annelid
          asset_name: annelid-0.1.0-x86_64-macOS
          asset_content_type: application/octet-stream
